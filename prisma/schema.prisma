// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("ADMIN")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Contact {
  id         String    @id @default(cuid())
  name       String
  email      String
  phone      String?
  subject    String?
  message    String
  status     String    @default("unread") // unread, read, replied
  adminReply String?
  repliedAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("contacts")
}

model Registration {
  id          String   @id @default(cuid())
  fullName    String
  email       String
  phone       String
  school      String?
  address     String?
  program     String   @default("GEMA")
  status      String   @default("pending") // pending, approved, rejected
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("registrations")
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  content     String
  type        String   @default("info") // info, warning, success, error
  isActive    Boolean  @default(true)
  publishDate DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("announcements")
}

model Settings {
  id    String @id @default(cuid())
  key   String @unique
  value String

  @@map("settings")
}

model Activity {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  location    String?
  capacity    Int?
  registered  Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("activities")
}

model Gallery {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  category    String   @default("general")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("galleries")
}

model ChatMessage {
  id          String      @id @default(cuid())
  message     String
  senderName  String
  senderEmail String
  senderType  String      @default("user") // user, admin
  status      String      @default("sent") // sent, delivered, read
  sessionId   String?     // Group messages by session
  replyTo     String?     // Reference to message being replied to
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([sessionId])
  @@index([createdAt])
  @@map("chat_messages")
}

model ChatSession {
  id          String   @id @default(cuid())
  userEmail   String
  userName    String
  status      String   @default("active") // active, closed, waiting
  assignedTo  String?  // Admin user ID
  lastMessage DateTime @default(now())
  priority    String   @default("normal") // high, normal, low
  tags        String?  // JSON array of tags
  notes       String?  // Admin notes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([status])
  @@index([assignedTo])
  @@index([lastMessage])
  @@map("chat_sessions")
}

model Assignment {
  id              String   @id @default(cuid())
  title           String
  description     String
  subject         String
  dueDate         DateTime
  maxSubmissions  Int      @default(30)
  status          String   @default("active") // active, closed, upcoming
  instructions    String?  // JSON array of instructions
  allowedFileTypes String? // Comma separated file extensions
  maxFileSize     Int      @default(10485760) // 10MB in bytes
  createdBy       String   // Admin ID
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  submissions     Submission[]
  
  @@index([status])
  @@index([dueDate])
  @@map("assignments")
}

model Submission {
  id               String   @id @default(cuid())
  assignmentId     String
  studentName      String
  studentId        String   // NIS or student identifier
  studentEmail     String?
  fileName         String
  originalFileName String
  filePath         String   // Cloud storage URL or local path
  fileSize         Int
  mimeType         String
  submittedAt      DateTime @default(now())
  status           String   @default("submitted") // submitted, late, reviewed, graded
  grade            Float?   // Grade if applicable
  feedback         String?  // Teacher feedback
  reviewedAt       DateTime?
  reviewedBy       String?  // Admin ID
  isLate           Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  assignment       Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  
  @@index([assignmentId])
  @@index([studentId])
  @@index([submittedAt])
  @@map("submissions")
}

model Article {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String?  // Short description
  content     String   // Full article content (HTML/Markdown)
  category    String   // tutorial, news, technology, programming, etc.
  tags        String?  // JSON array of tags
  author      String   // Author name
  authorId    String   // Admin ID
  status      String   @default("draft") // draft, published, archived
  featured    Boolean  @default(false)
  imageUrl    String?  // Featured image
  readTime    Int?     // Estimated read time in minutes
  views       Int      @default(0)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([status])
  @@index([category])
  @@index([publishedAt])
  @@index([featured])
  @@map("articles")
}
